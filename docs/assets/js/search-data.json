{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/bootloader_apps_uart/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "UART Bootloader Host Tools",
    "title": "UART Bootloader Tools Help",
    "content": "This document describes the usage of UART bootloader host tools . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/readme.html#uart-bootloader-tools-help",
    "relUrl": "/tools/readme.html#uart-bootloader-tools-help"
  },"2": {
    "doc": "UART Bootloader Host Tools",
    "title": "Downloading the host tools",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Following host tools are provided to be used with different bootloaders . | Host Script | Description | . | btl_host.py | Used to communicate with the Bootloader running on the device via UART interface | . | btl_app_merge_bin.py | Used to merge the bootloader binary and application binary | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/readme.html#downloading-the-host-tools",
    "relUrl": "/tools/readme.html#downloading-the-host-tools"
  },"3": {
    "doc": "UART Bootloader Host Tools",
    "title": "UART Bootloader Host Tools",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/readme.html",
    "relUrl": "/tools/readme.html"
  },"4": {
    "doc": "UART Fail Safe Bootloader",
    "title": "UART Fail Safe Bootloader",
    "content": "This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using UART protocol. Bootloader Application . | This is a fail safe bootloader application which resides from . | The starting location of both the banks of device flash memory region for SAM devices with dual bank support | The starting location of the Boot flash memory region for PIC32M devices with dual bank support | . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive application binary from host PC | It calls the bootloader_Tasks() function which receives application to be programmed into opposite bank of flash memory over UART channel | Trigger methods . | It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . Test Application . | This is a test application which resides from . | The end of bootloader size in device flash memory for SAM devices with dual bank support | The start of Program Flash memory for PIC32MZ, PIC32MK devices with dual bank support . | The last ROW of each bank is reserved for storing the serial number which is updated by bootloader after every firmware upgrade | . | . | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) . | Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/readme.html#uart-fail-safe-bootloader",
    "relUrl": "/apps/uart_fail_safe_bootloader/readme.html#uart-fail-safe-bootloader"
  },"5": {
    "doc": "UART Fail Safe Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run UART Fail Safe bootloader on different development kits . | Development Kit | . | PIC32MK GP Development Kit | . | PIC32MK MCM Curiosity Pro Development Board | . | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/readme.html#development-kits",
    "relUrl": "/apps/uart_fail_safe_bootloader/readme.html#development-kits"
  },"6": {
    "doc": "UART Fail Safe Bootloader",
    "title": "UART Fail Safe Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/readme.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/readme.html"
  },"7": {
    "doc": "UART Bootloader",
    "title": "UART Bootloader",
    "content": "This example application shows how to use the Bootloader Library to bootload an application using UART protocol. Bootloader Application . | This is a bootloader application which resides from . | The starting location of the flash memory region for SAM devices | The start of Program Flash memory for PIC32MX devices with 3KB bootflash memory | The starting location of the Boot flash memory region for PIC32MK, PIC32MX and PIC32MZ devices | . | It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive application binary from host PC | It calls the bootloader_Tasks() function which receives application to be programmed into flash memory over UART channel | Trigger Methods . | It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device | It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device | . | . Test Application . | This is a test application which resides from . | The end of bootloader size in device flash memory for SAM devices | The end of bootloader size in Program Flash memory for PIC32MX devices with 3KB bootflash memory | The start of Program Flash memory for PIC32MK, PIC32MX and PIC32MZ devices | . | It will be loaded into flash memory by bootloader application | It blinks an LED and provides console output | It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) . | Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/readme.html#uart-bootloader",
    "relUrl": "/apps/uart_bootloader/readme.html#uart-bootloader"
  },"8": {
    "doc": "UART Bootloader",
    "title": "Development Kits",
    "content": "The following table provides links to documentation on how to build and run UART bootloader on different development kits . | Development Kit | . | PIC32CM MC00 Curiosity Pro Evaluation Kit | . | PIC32MK GP Development Kit | . | PIC32MK MCJ Curiosity Pro Development Board | . | PIC32MK MCM Curiosity Pro Development Board | . | PIC32MX1/2/5 Starter Kit | . | PIC32MX Curiosity Development Board | . | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . | PIC32 WFI32E Curiosity Board | . | SAM C21N Xplained Pro Evaluation Kit | . | SAM D11 Xplained Pro Evaluation Kit | . | SAM D20 Xplained Pro Evaluation Kit | . | SAM D21 Xplained Pro Evaluation Kit | . | SAM DA1 Xplained Pro Evaluation Kit | . | SAM E54 Xplained Pro Evaluation Kit | . | SAM E70 Xplained Ultra Evaluation Kit | . | SAM G55 Xplained Pro Evaluation Kit | . | SAM HA1G16A Xplained Pro | . | SAM L10 Xplained Pro Evaluation Kit | . | SAM L21 Xplained Pro Evaluation Kit | . | SAM L22 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/readme.html#development-kits",
    "relUrl": "/apps/uart_bootloader/readme.html#development-kits"
  },"9": {
    "doc": "UART Bootloader",
    "title": "UART Bootloader",
    "content": ". To clone or download these application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/readme.html",
    "relUrl": "/apps/uart_bootloader/readme.html"
  },"10": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Bootloader and Application binary merge script Help",
    "content": "This document describes the usage of btl_app_merge_bin.py host script . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html#bootloader-and-application-binary-merge-script-help",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#bootloader-and-application-binary-merge-script-help"
  },"11": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Downloading the host script",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_app_merge_bin.py . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html#downloading-the-host-script",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#downloading-the-host-script"
  },"12": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Setting up the Host PC",
    "content": ". | The Script is compatible with Python 3.x and higher | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html#setting-up-the-host-pc",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#setting-up-the-host-pc"
  },"13": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Description",
    "content": ". | This script should be used to merge the bootloader binary and application binary . | It creates a merged binary output where bootloader is placed from start and the application will be placed at the offset passed as parameter . | If the application offset is not equal to end of bootloader offset it fills the gap with 0xFF until the application offset . | The merged binary can be used by btl_host.py as input for Updating bootloader and application together . | The merged binary will be created in the directory from where the script was called . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html#description",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#description"
  },"14": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Usage Examples",
    "content": "Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py --help . Below is the syntax and an example on how to merge a bootloader binary and application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o &lt;Offset&gt; -b &lt;Bootloader_binary_path&gt; -a &lt;Application_binary_path&gt; . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i COM18 -d same5x -a 0x80000 -f &lt;Path_to_merged_binary&gt;/btl_app_merged.bin . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html#usage-examples",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html#usage-examples"
  },"15": {
    "doc": "Bootloader and Application binary merge script",
    "title": "Bootloader and Application binary merge script",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_app_merge_bin.html",
    "relUrl": "/tools/docs/readme_btl_app_merge_bin.html"
  },"16": {
    "doc": "Bootloader Host Script",
    "title": "Bootloader Host Script Help",
    "content": "This document describes the usage of btl_host.py host script . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html#bootloader-host-script-help",
    "relUrl": "/tools/docs/readme_btl_host.html#bootloader-host-script-help"
  },"17": {
    "doc": "Bootloader Host Script",
    "title": "Downloading the host script",
    "content": "To clone or download the host tools from Github,go to the bootloader repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the tool in bootloader repository is tools/btl_host.py . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html#downloading-the-host-script",
    "relUrl": "/tools/docs/readme_btl_host.html#downloading-the-host-script"
  },"18": {
    "doc": "Bootloader Host Script",
    "title": "Setting up the Host PC",
    "content": ". | The Script is compatible with Python 3.x and higher . | It requires pyserial package to communicate with device over UART. Use below command to install the pyserial package . pip3 install pyserial . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html#setting-up-the-host-pc",
    "relUrl": "/tools/docs/readme_btl_host.html#setting-up-the-host-pc"
  },"19": {
    "doc": "Bootloader Host Script",
    "title": "Description",
    "content": ". | This host script should be used to communicate with the Bootloader running on the device via UART interface . | It is a command line interface and implements the bootloader protocol required to communicate from host PC . | If size of the input binary file is not aligned to device erase boundary it appends 0xFF to the binary to make it aligned and then sends the binary to the device . | It should be used with -s (–swap) option when using bootloader in fail safe update mode to trigger a swap bank and reset . | It should be used with -b (–boot) option with address as 0x0 when updating the bootloader itself on CORTEX-M based MCUs . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html#description",
    "relUrl": "/tools/docs/readme_btl_host.html#description"
  },"20": {
    "doc": "Bootloader Host Script",
    "title": "Usage Examples",
    "content": "Below is the syntax to show help menu for the script . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py --help . Bootloader basic mode syntax and example . Below syntax and example can be used to program a binary and send a Reset command . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d &lt;Device Name&gt; -a &lt;address&gt; -f &lt;Application_binary_path&gt; . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i COM18 -d same5x -a 0x2000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . Bootloader Fail Safe Update mode syntax and example . Below syntax and example can be used to program a binary in Inactive Bank and send a Swap Bank and Reset command . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d &lt;Device Name&gt; -a &lt;Inactive Bank address&gt; -f &lt;Path to application binary&gt; . Example to send Bootloader binary in inactive bank . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i COM18 -d same5x -a 0x80000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . Example to send Application binary in inactive bank . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i COM18 -d same5x -a 0x82000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html#usage-examples",
    "relUrl": "/tools/docs/readme_btl_host.html#usage-examples"
  },"21": {
    "doc": "Bootloader Host Script",
    "title": "Bootloader Host Script",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/tools/docs/readme_btl_host.html",
    "relUrl": "/tools/docs/readme_btl_host.html"
  },"22": {
    "doc": "Application Configurations",
    "title": "Configuring an Application to be bootloaded",
    "content": ". | To bootload a CORTEX-M based application refer to Application Configurations for CORTEX-M based MCUs . | To bootload a MIPS based application refer to Application Configurations for MIPS based MCUs . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded",
    "relUrl": "/apps/docs/readme_configure_application.html#configuring-an-application-to-be-bootloaded"
  },"23": {
    "doc": "Application Configurations",
    "title": "Application Configurations",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application.html",
    "relUrl": "/apps/docs/readme_configure_application.html"
  },"24": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Configuring an application to be bootloaded for MIPS based MCUs",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html#configuring-an-application-to-be-bootloaded-for-mips-based-mcus",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#configuring-an-application-to-be-bootloaded-for-mips-based-mcus"
  },"25": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Linker configurations for the application to be bootloaded",
    "content": "Bootloader placement for various PIC32M product families . The bootloader is placed in Boot Flash Memory (BFM) or Program Flash Memory (PFM) based on the size of the bootloader and available Boot flash memory on the device. | If the bootloader fits into the available BFM, it is placed in BFM. The user application can use the complete area of the program Flash memory. | If the bootloader does not fit into the available BFM, it is placed in PFM. The user application can use the remaining area of the program Flash memory. | The following table shows the available Boot Flash memory and the placement of different bootloaders by product family. | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html#linker-configurations-for-the-application-to-be-bootloaded",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#linker-configurations-for-the-application-to-be-bootloaded"
  },"26": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Setting up the Application linker script",
    "content": "The linker script file of the application project has to be modified to place the vector table and reset handlers in program flash memory. | For Quick start, Refer to pre developed application linker scripts app_XX.ld placed in projects device specific configuration folder of bootloader_apps_xxx/ repository . | Reset Address for the application to be loaded through bootloader should match the Application start address mentioned in bootloader project. | The vector address of a given interrupt is calculated using Exception Base (EBASE) CPU register and the _ebase_address should be aligned to 4KB boundary . | Note: The below sections provides overview of changes required in the applications linker scripts. The address location and size may vary based on the specific device used . | . For Bootloaders placed in Boot Flash Memory (PIC32MZ and PIC32MK Devices) . | The application start address by default will be start of program flash memory . | Refer to specific device datasheet for program flash memory start address and length | . | The Initial 4KB from Application start address are used by Reset Handler and and cache_init section . | XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register. The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs. | If the EBASE address is aligned to 4KB, then all the interrupt vectors must be located within the 4KB from base address. | Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx &gt; 0x1000), then the bitwise OR operator may not provide correct interrupt vector address. | . | To provide maximum flexibility in placement of interrupt vectors: . | Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script . | Change the offsets of exceptions and vector section to place them after the device startup code. With this the interrupt handlers can be located anywhere in the Program Flash memory. | . | Updated linker scripts as explained above is shown here as an example . | Note: Cache related sections are not applicable for PIC32MK Devices | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000); /* Place the vector table and other exceptions after the device reset and * cache init code. */ PROVIDE(_ebase_vector_offsets = 0x1000); _RESET_ADDR = 0xBD000000; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0; _CACHE_ERR_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x100; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x180; kseg0_program_mem (rx) : ORIGIN = 0x9D001000, LENGTH = 0x200000 - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000, LENGTH = 0x480 kseg1_boot_mem_4B0 : ORIGIN = 0xBD0004B0, LENGTH = 0x1000 - 0x4B0 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem .cache_init : { *(.cache_init) *(.cache_init.*) } &gt; kseg1_boot_mem_4B0 ... /* Interrupt vector table with vector offsets */ .vectors _ebase_address + _ebase_vector_offsets + 0x200 : { /* Symbol __vector_offset_n points to .vector_n if it exists, * otherwise points to the default handler. The * vector_offset_init.o module then provides a .data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code. */ . = ALIGN(4) ; __vector_offset_0 = (DEFINED(__vector_dispatch_0) ? (. - _ebase_address) : __vector_offset_default); KEEP(*(.vector_0)) ..... /* Default interrupt handler */ . = ALIGN(4) ; __vector_offset_default = . - _ebase_address; KEEP(*(.vector_default)) } &gt; kseg0_program_mem . For Bootloaders placed in Program Flash Memory (PIC32MK Devices) . | The bootloader code resides from start of Program flash memory, hence the application start address has to be after the end of bootloader. | Refer to specific device datasheet for program flash memory start address and length | . | The Initial 4KB from Application start address are used by Reset Handler section . | XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register. The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs. | If the EBASE address is aligned to 4KB, then all the interrupt vectors must be located within the 4KB from base address. | Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx &gt; 0x1000), then the bitwise OR operator may not provide correct interrupt vector address. | . | To provide maximum flexibility in placement of interrupt vectors: . | Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script . | Note: As _ebase_address is only used to calculate the vector offset it can be placed at start of program flash memory even though the bootloader code is residing there . | Change the offsets of exceptions and vector section to place them after the device startup code of application. With this the interrupt handlers can be located anywhere in the Program Flash memory after bootloader space . | . | Updated linked scripts as explained above is shown here as an example. | Bootloader length &lt;bootloader_length&gt; in the below snippet needs to be replaced with size of the respective bootloader. | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000); /* Place the vector table and other exceptions after the device reset and * cache init code. */ PROVIDE(_ebase_vector_offsets = &lt;bootloader_length&gt; + 0x1000); _RESET_ADDR = 0xBD000000 + &lt;bootloader_length&gt;; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets + 0x180; kseg0_program_mem (rx) : ORIGIN = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000, LENGTH = 0x200000 - &lt;bootloader_length&gt; - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000 + &lt;bootloader_length&gt;, LENGTH = 0x1000 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem ... /* Interrupt vector table with vector offsets */ .vectors _ebase_address + _ebase_vector_offsets + 0x200 : { /* Symbol __vector_offset_n points to .vector_n if it exists, * otherwise points to the default handler. The * vector_offset_init.o module then provides a .data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code. */ . = ALIGN(4) ; __vector_offset_0 = (DEFINED(__vector_dispatch_0) ? (. - _ebase_address) : __vector_offset_default); KEEP(*(.vector_0)) ..... /* Default interrupt handler */ . = ALIGN(4) ; __vector_offset_default = . - _ebase_address; KEEP(*(.vector_default)) } &gt; kseg0_program_mem . For Bootloaders placed in Boot Flash Memory (PIC32MX Devices) . | The application start address by default will be start of program flash memory . | Refer to specific device datasheet for program flash memory start address and length | . | The Initial 4KB are used by Reset Handler section . | In PIC32MX devices the _ebase_address holds the start address of vector table and it must be placed at 4KB boundary after the Reset Handler section . | Updated linked scripts as explained above is shown here as an example. | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D001000); _RESET_ADDR = 0xBD000000 kseg0_program_mem (rx) : ORIGIN = 0x9D001000, LENGTH = 0x80000 - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000, LENGTH = 0x1000 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem ...vector_0 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 0) : { KEEP(*(.vector_0)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_0) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 0 too large\") .vector_1 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 1) : { KEEP(*(.vector_1)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_1) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 1 too large\") ..... For Bootloaders placed in Program Flash Memory (PIC32MX Devices) . | The bootloader code resides from start of Program flash memory, hence the application start address has to be after the end of bootloader. | The Initial 4KB from Application start address are used by Reset Handler section . | Place the _ebase_address after the device startup code of application . | Updated linked scripts as explained above is shown here as an example. | Bootloader length &lt;bootloader_length&gt; in the below snippet needs to be replaced with size of the respective bootloader. | . | . PROVIDE(_vector_spacing = 0x0001); PROVIDE(_ebase_address = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000); _RESET_ADDR = 0xBD000000 + &lt;bootloader_length&gt;; kseg0_program_mem (rx) : ORIGIN = 0x9D000000 + &lt;bootloader_length&gt; + 0x1000, LENGTH = 0x80000 - &lt;bootloader_length&gt; - 0x1000 kseg1_boot_mem : ORIGIN = 0xBD000000 + &lt;bootloader_length&gt;, LENGTH = 0x1000 /* Boot Sections */ .reset _RESET_ADDR : { KEEP(*(.reset)) KEEP(*(.reset.startup)) } &gt; kseg1_boot_mem ...vector_0 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 0) : { KEEP(*(.vector_0)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_0) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 0 too large\") .vector_1 _ebase_address + 0x200 + ((_vector_spacing &lt;&lt; 5) * 1) : { KEEP(*(.vector_1)) } &gt; kseg0_program_mem ASSERT (_vector_spacing == 0 || SIZEOF(.vector_1) &lt;= (_vector_spacing &lt;&lt; 5), \"function at exception vector 1 too large\") ..... Note . | The bootloader and the application must have the same device configuration bit settings. The Device configuration bit settings from the bootloader project will be updated by the programmer/debugger, Hence the application linker script should not have any device configuration bit settings. The application project will use the device configuration bit settings done by bootloader. | Device configurations and debug exception need to discarded from final hex file for the application project. | . /DISCARD/ : { *(._debug_exception) } /DISCARD/ : { *(.config_*) } . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html#setting-up-the-application-linker-script",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#setting-up-the-application-linker-script"
  },"27": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Additional settings (Optional)",
    "content": ". | Data Memory Origin and Data Memory Length values should be updated in linkerscript for reserving configured bytes from start of RAM to trigger bootloader from firmware | . /* Reserve &lt;trigger_len&gt; Bytes to Store Bootloader Trigger Pattern */ kseg0_data_mem (w!x) : ORIGIN = &lt;ram_start&gt; + &lt;trigger_len&gt;, LENGTH = &lt;ram_length&gt; - &lt;trigger_len&gt; . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html#additional-settings-optional",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#additional-settings-optional"
  },"28": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "MPLAB X Settings",
    "content": ". | Specifying post build option to automatically generate the binary file from hex file once the build is complete . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html#mplab-x-settings",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html#mplab-x-settings"
  },"29": {
    "doc": "Application Configurations for MIPS based MCUs",
    "title": "Application Configurations for MIPS based MCUs",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_pic32m.html",
    "relUrl": "/apps/docs/readme_configure_application_pic32m.html"
  },"30": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Configuring an application to be bootloaded for CORTEX-M based MCUs",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#configuring-an-application-to-be-bootloaded-for-cortex-m-based-mcus"
  },"31": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application settings in MHC system configuration",
    "content": ". | Launch MHC for the application project to be configured | Select system component from the project graph and configure the below highlighted settings . | Disable Fuse Settings: . | Fuse settings needs to be disabled for the application which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool from bootloader code. Also the fuse settings are not programmable through firmware . | Enabling the fuse settings also increases the size of the binary when generated through the hex file . | When updating the bootloader itself, make sure that the fuse settings for the bootloader application are also disabled . | . | Specify the Application Start Address: . | Specify the Start address from where the application will run under the Application Start Address (Hex) option in System block in MHC. | This value should be equal to or greater than the bootloader size and must be aligned to the erase unit size on that device. | As this value will be used by bootloader to Jump to application at device reset it should match the value provided to bootloader code . | The Application Start Address (Hex) will be used to generate XC32 compiler settings to place the code at intended address . | After the project is regenerated, the ROM_ORIGIN and ROM_LENGTH are the XC32 linker variables which will be overridden with value provided for Application Start Address (Hex) and can be verified under Options for xc32-ld in Project Properties in MPLABX IDE as shown below. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_sam.html#application-settings-in-mhc-system-configuration",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#application-settings-in-mhc-system-configuration"
  },"32": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "MPLAB X Settings",
    "content": ". | Specifying post build option to automatically generate the binary file from hex file once the build is complete . ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.hex ${DISTDIR}/${PROJECTNAME}.${IMAGE_TYPE}.bin . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_sam.html#mplab-x-settings",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#mplab-x-settings"
  },"33": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Additional settings (Optional)",
    "content": ". | RAM_ORIGIN and RAM_LENGTH values should be provided for reserving configured bytes from start of RAM to trigger bootloader from firmware . | Under Project Properties, expand options for xc32-ld and define the values for RAM_ORIGIN and RAM_LENGTH under Additional options . | This is optional and can be ignored if not required . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_sam.html#additional-settings-optional",
    "relUrl": "/apps/docs/readme_configure_application_sam.html#additional-settings-optional"
  },"34": {
    "doc": "Application Configurations for CORTEX-M based MCUs",
    "title": "Application Configurations for CORTEX-M based MCUs",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/docs/readme_configure_application_sam.html",
    "relUrl": "/apps/docs/readme_configure_application_sam.html"
  },"35": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#building-and-running-the-uart-bootloader-applications"
  },"36": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32cm_mc00_curiosity_pro.X | MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32cm_mc00_curiosity_pro.X | MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#downloading-and-building-the-application"
  },"37": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-pic32cm-mc00-curiosity-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-pic32cm-mc00-curiosity-pro-evaluation-kit"
  },"38": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#setting-up-the-host-script"
  },"39": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32cm_mc00_curiosity_pro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32cm_mc00_curiosity_pro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32cm -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32cm_mc00_curiosity_pro.X/dist/pic32cm_mc00_curiosity_pro/production/pic32cm_mc00_curiosity_pro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#running-the-application"
  },"40": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html#additional-steps-optional"
  },"41": {
    "doc": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "title": "Building and Running on PIC32CM MC00 Curiosity Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32cm_mc00_curiosity_pro.html"
  },"42": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#building-and-running-the-uart-bootloader-applications"
  },"43": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_gp_db.X | MPLABX Project for PIC32MK GP Development Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_gp_db.X | MPLABX Project for PIC32MK GP Development Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#downloading-and-building-the-application"
  },"44": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Setting up PIC32MK GP Development Kit",
    "content": ". | Connect a micro USB cable to the USB to UART port J25. This will enumerate as a COM port on the PC. | For programming, Connect a micro USB cable to the USB DEBUG port J12 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-pic32mk-gp-development-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-pic32mk-gp-development-kit"
  },"45": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-the-host-script"
  },"46": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mk_gp_db.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mk_gp_db.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mk -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_gp_db.X/dist/pic32mk_gp_db/production/pic32mk_gp_db.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch S1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch S1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#running-the-application"
  },"47": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html#additional-steps-optional"
  },"48": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Building and Running on PIC32MK GP Development Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_gp_db.html"
  },"49": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Building and Running the UART Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#building-and-running-the-uart-fail-safe-bootloader-applications",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#building-and-running-the-uart-fail-safe-bootloader-applications"
  },"50": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_gp_db.X | MPLABX Project for PIC32MK GP Development Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_gp_db.X | MPLABX Project for PIC32MK GP Development Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#downloading-and-building-the-application"
  },"51": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Setting up PIC32MK GP Development Kit",
    "content": ". | Connect a micro USB cable to the USB to UART port J25. This will enumerate as a COM port on the PC. | For programming, Connect a micro USB cable to the USB DEBUG port J12 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-pic32mk-gp-development-kit",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-pic32mk-gp-development-kit"
  },"52": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#setting-up-the-host-script"
  },"53": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mk_gp_db.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mk_gp_db.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the test application binary to opposite panel . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mk -a 0x9D080000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mk_gp_db.X/dist/pic32mk_gp_db/production/pic32mk_gp_db.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running | . | Press and hold the Switch S1 to trigger Bootloader from test application to program firmware in other bank and you should see below output . | Repeat Steps 5-11 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | Also to program the new firmware in opposite bank | You should see other Bank in console displayed compared to first run | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#running-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#running-the-application"
  },"54": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#additional-steps-optional",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html#additional-steps-optional"
  },"55": {
    "doc": "Building and Running on PIC32MK GP Development Kit",
    "title": "Building and Running on PIC32MK GP Development Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_gp_db.html"
  },"56": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#building-and-running-the-uart-bootloader-applications"
  },"57": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_mcj_curiosity_pro.X | MPLABX Project for PIC32MK MCJ Curiosity Pro | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_mcj_curiosity_pro.X | MPLABX Project for PIC32MK MCJ Curiosity Pro | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#downloading-and-building-the-application"
  },"58": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Setting up PIC32MK MCJ Curiosity Pro",
    "content": ". | Install an USB UART click board on to the mikroBUS Xplained Pro board | Connect the mikroBUS Xplained Pro board to the J501 header of the PIC32MK MCJ Curiosity Pro | Connect mini USB cable to the USB UART click board. This will enumerate the USB to UART port | For programming, Connect micro USB cable to the ‘Debug USB’ connector(J1) on the board to the computer | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#setting-up-pic32mk-mcj-curiosity-pro",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#setting-up-pic32mk-mcj-curiosity-pro"
  },"59": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#setting-up-the-host-script"
  },"60": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mk_mcj_curiosity_pro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mk_mcj_curiosity_pro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mk -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_mcj_curiosity_pro.X/dist/pic32mk_mcj_curiosity_pro/production/pic32mk_mcj_curiosity_pro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED2 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED2 should start blinking and you should see below output on the console . | Press and hold the Switch SW200 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW200 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#running-the-application"
  },"61": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html#additional-steps-optional"
  },"62": {
    "doc": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "title": "Building and Running on PIC32MK MCJ Curiosity Pro Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcj_curiosity_pro.html"
  },"63": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Building and Running the UART Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#building-and-running-the-uart-fail-safe-bootloader-applications",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#building-and-running-the-uart-fail-safe-bootloader-applications"
  },"64": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_mcm_curiosity_pro.X | MPLABX Project for PIC32MK MCM Curiosity Pro Development Board | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_mcm_curiosity_pro.X | MPLABX Project for PIC32MK MCM Curiosity Pro Development Board | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#downloading-and-building-the-application"
  },"65": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Setting up PIC32MK MCM Curiosity Pro Development Board",
    "content": ". | Connect a micro USB cable to the USB to UART port J400. This will enumerate as a COM port on the PC. | For programming, Connect a micro USB cable to the USB DEBUG port J500 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-pic32mk-mcm-curiosity-pro-development-board",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-pic32mk-mcm-curiosity-pro-development-board"
  },"66": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-the-host-script"
  },"67": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mk_mcm_curiosity_pro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mk_mcm_curiosity_pro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the test application binary to opposite panel . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mk -a 0x9D080000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mk_mcm_curiosity_pro.X/dist/pic32mk_mcm_curiosity_pro/production/pic32mk_mcm_curiosity_pro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running | . | Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output . | Repeat Steps 5-11 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | Also to program the new firmware in opposite bank | You should see other Bank in console displayed compared to first run | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#running-the-application"
  },"68": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#additional-steps-optional"
  },"69": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html"
  },"70": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#building-and-running-the-uart-bootloader-applications"
  },"71": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mk_mcm_curiosity_pro.X | MPLABX Project for PIC32MK MCM Curiosity Pro Development Board | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mk_mcm_curiosity_pro.X | MPLABX Project for PIC32MK MCM Curiosity Pro Development Board | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#downloading-and-building-the-application"
  },"72": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Setting up PIC32MK MCM Curiosity Pro Development Board",
    "content": ". | Connect a micro USB cable to the USB to UART port J400. This will enumerate as a COM port on the PC. | For programming, Connect a micro USB cable to the USB DEBUG port J500 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-pic32mk-mcm-curiosity-pro-development-board",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-pic32mk-mcm-curiosity-pro-development-board"
  },"73": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#setting-up-the-host-script"
  },"74": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mk_mcm_curiosity_pro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mk_mcm_curiosity_pro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mk -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_mcm_curiosity_pro.X/dist/pic32mk_mcm_curiosity_pro/production/pic32mk_mcm_curiosity_pro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#running-the-application"
  },"75": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html#additional-steps-optional"
  },"76": {
    "doc": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "title": "Building and Running on PIC32MK MCM Curiosity Pro Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mk_mcm_curiosity_pro.html"
  },"77": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#building-and-running-the-uart-bootloader-applications"
  },"78": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mx470_curiosity.X | MPLABX Project for PIC32MX Curiosity Development Board | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mx470_curiosity.X | MPLABX Project for PIC32MX Curiosity Development Board | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#downloading-and-building-the-application"
  },"79": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Setting up PIC32MX Curiosity Development Board",
    "content": ". | Install an USB UART click board on to the mikroBUS socket J5 | Connect mini USB cable to the USB UART click board. This will enumerate the USB to UART port . | Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms | . | For programming, Connect mini USB cable to the ‘Debug USB’ connector(J3) on the board to the computer | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#setting-up-pic32mx-curiosity-development-board",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#setting-up-pic32mx-curiosity-development-board"
  },"80": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#setting-up-the-host-script"
  },"81": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mx470_curiosity.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mx470_curiosity.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mx -a 0x9D000000 -p 4096 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mx470_curiosity.X/dist/pic32mx470_curiosity/production/pic32mx470_curiosity.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch S1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch S1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#running-the-application"
  },"82": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html#additional-steps-optional"
  },"83": {
    "doc": "Building and Running on PIC32MX Curiosity Development Board",
    "title": "Building and Running on PIC32MX Curiosity Development Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx470_curiosity.html"
  },"84": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#building-and-running-the-uart-bootloader-applications"
  },"85": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mx_125_sk.X | MPLABX Project for PIC32MX 1/2/5 Starter Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mx_125_sk.X | MPLABX Project for PIC32MX 1/2/5 Starter Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#downloading-and-building-the-application"
  },"86": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Setting up PIC32MX 1/2/5 Starter Kit",
    "content": ". | Mount PIC32MX 1/2/5 Starter Kit on the J1 connector of Starter Kit I/O Expansion Board | Connect TX pin of USB UART click to U2RX pin of J11 header on Starter Kit I/O Expansion Board | Connect RX pin of USB UART click to U2TX pin of J11 header on Starter Kit I/O Expansion Board | Connect GND pin of USB UART click to GND pin of J11 header on Starter Kit I/O Expansion Board | Connect mini USB cable to the USB UART click board. This will enumerate the USB to UART port. | For programming, Connect mini USB cable to the ‘Debug USB’ connector(J3) on the PIC32MX 1/2/5 Starter Kit to the computer | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#setting-up-pic32mx-125-starter-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#setting-up-pic32mx-125-starter-kit"
  },"87": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#setting-up-the-host-script"
  },"88": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mx_125_sk.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mx_125_sk.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mx -a 0x9D001000 -p 1024 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mx_125_sk.X/dist/pic32mx_125_sk/production/pic32mx_125_sk.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#running-the-application"
  },"89": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html#additional-steps-optional"
  },"90": {
    "doc": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "title": "Building and Running on PIC32MX 1/2/5 Starter Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mx_125_sk.html"
  },"91": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running the UART Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-uart-fail-safe-bootloader-applications",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-uart-fail-safe-bootloader-applications"
  },"92": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application"
  },"93": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". | Connect a micro USB cable to the UART-USB port J5 | For programming, connect a micro USB cable to the USB Debug port J19 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto"
  },"94": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script"
  },"95": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mz_das_sk.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mz_das_sk.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the test application binary to opposite panel . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mz_das_sk.X/dist/pic32mz_das_sk/production/pic32mz_das_sk.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running | . | Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output . | Repeat Steps 5-11 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | Also to program the new firmware in opposite bank | You should see other Bank in console displayed compared to first run | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application"
  },"96": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional"
  },"97": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_das_sk.html"
  },"98": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#building-and-running-the-uart-bootloader-applications"
  },"99": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mz_das_sk.X | MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#downloading-and-building-the-application"
  },"100": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". | Connect a micro USB cable to the UART-USB port J5 | For programming, connect a micro USB cable to the USB Debug port J19 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-pic32mz-embedded-graphics-with-stacked-dram-da-starter-kit-crypto"
  },"101": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#setting-up-the-host-script"
  },"102": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mz_das_sk.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mz_das_sk.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mz -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_das_sk.X/dist/pic32mz_das_sk/production/pic32mz_das_sk.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#running-the-application"
  },"103": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html#additional-steps-optional"
  },"104": {
    "doc": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "title": "Building and Running on PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto)",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_das_sk.html"
  },"105": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running the UART Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-uart-fail-safe-bootloader-applications",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-uart-fail-safe-bootloader-applications"
  },"106": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_ef_sk.X | MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mz_ef_sk.X | MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application"
  },"107": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". | Connect a mini USB cable to the UART-USB port J11 | For programming, connect a mini USB cable to the USB Debug port J3 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit"
  },"108": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script"
  },"109": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mz_ef_sk.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mz_ef_sk.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the test application binary to opposite panel . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d pic32mz -a 0x9D100000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mz_ef_sk.X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running | . | Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output . | Repeat Steps 5-11 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | Also to program the new firmware in opposite bank | You should see other Bank in console displayed compared to first run | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application"
  },"110": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional"
  },"111": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_pic32mz_ef_sk.html"
  },"112": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#building-and-running-the-uart-bootloader-applications"
  },"113": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_ef_sk.X | MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mz_ef_sk.X | MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#downloading-and-building-the-application"
  },"114": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". | Connect a mini USB cable to the UART-USB port J11 | For programming, connect a mini USB cable to the USB Debug port J3 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-pic32mz-embedded-connectivity-with-fpu-ef-starter-kit"
  },"115": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#setting-up-the-host-script"
  },"116": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mz_ef_sk.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mz_ef_sk.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mz -a 0x9D000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_ef_sk.X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED3 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED3 should start blinking and you should see below output on the console . | Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#running-the-application"
  },"117": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html#additional-steps-optional"
  },"118": {
    "doc": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "title": "Building and Running on PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_ef_sk.html"
  },"119": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#building-and-running-the-uart-bootloader-applications"
  },"120": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . Test Application . | Project Name | Description | . | test_app/firmware/pic32mz_w1_curiosity.X | MPLABX Project for PIC32 WFI32E Curiosity Board | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#downloading-and-building-the-application"
  },"121": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Setting up PIC32 WFI32E Curiosity Board",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable . | On the GPIO Header (J207), connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter (for eg: USB UART click board) . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-pic32-wfi32e-curiosity-board"
  },"122": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#setting-up-the-host-script"
  },"123": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/pic32mz_w1_curiosity.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/pic32mz_w1_curiosity.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d pic32mzw -a 0x90000000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_w1_curiosity.X/dist/pic32mz_w1_curiosity/production/pic32mz_w1_curiosity.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the RED LED (D202) should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | RED LED (D202) should start blinking and you should see below output on the console . | Press and hold the Switch SW1/SW200 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW1/SW200 and then Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#running-the-application"
  },"124": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html#additional-steps-optional"
  },"125": {
    "doc": "Building and Running on PIC32 WFI32E Curiosity Board",
    "title": "Building and Running on PIC32 WFI32E Curiosity Board",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_pic32mz_w1_curiosity.html"
  },"126": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"127": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_c21n_xpro.X | MPLABX Project for SAM C21N Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#downloading-and-building-the-application"
  },"128": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Setting up SAM C21N Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-sam-c21n-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-sam-c21n-xplained-pro-evaluation-kit"
  },"129": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#setting-up-the-host-script"
  },"130": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_c21n_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_c21n_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samc2x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_c21n_xpro.X/dist/sam_c21n_xpro/production/sam_c21n_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#running-the-application"
  },"131": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html#additional-steps-optional"
  },"132": {
    "doc": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM C21N Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_c21n_xpro.html"
  },"133": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"134": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d11_xpro.X | MPLABX Project for SAM D11 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#downloading-and-building-the-application"
  },"135": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D11 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#setting-up-sam-d11-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#setting-up-sam-d11-xplained-pro-evaluation-kit"
  },"136": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#setting-up-the-host-script"
  },"137": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_d11_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_d11_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samd1x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d11_xpro.X/dist/sam_d11_xpro/production/sam_d11_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#running-the-application"
  },"138": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html#additional-steps-optional"
  },"139": {
    "doc": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D11 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d11_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d11_xpro.html"
  },"140": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"141": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d20_xpro.X | MPLABX Project for SAM D20 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#downloading-and-building-the-application"
  },"142": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D20 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#setting-up-sam-d20-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#setting-up-sam-d20-xplained-pro-evaluation-kit"
  },"143": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#setting-up-the-host-script"
  },"144": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_d20_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_d20_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samd2x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d20_xpro.X/dist/sam_d20_xpro/production/sam_d20_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#running-the-application"
  },"145": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html#additional-steps-optional"
  },"146": {
    "doc": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D20 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d20_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d20_xpro.html"
  },"147": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"148": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_d21_xpro.X | MPLABX Project for SAM D21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#downloading-and-building-the-application"
  },"149": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM D21 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#setting-up-sam-d21-xplained-pro-evaluation-kit"
  },"150": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#setting-up-the-host-script"
  },"151": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_d21_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_d21_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samd2x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d21_xpro.X/dist/sam_d21_xpro/production/sam_d21_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#running-the-application"
  },"152": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html#additional-steps-optional"
  },"153": {
    "doc": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM D21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_d21_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_d21_xpro.html"
  },"154": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"155": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_da1_xpro.X | MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#downloading-and-building-the-application"
  },"156": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM DA1 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#setting-up-sam-da1-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#setting-up-sam-da1-xplained-pro-evaluation-kit"
  },"157": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#setting-up-the-host-script"
  },"158": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_da1_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_da1_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samda1 -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_da1_xpro.X/dist/sam_da1_xpro/production/sam_da1_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#running-the-application"
  },"159": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html#additional-steps-optional"
  },"160": {
    "doc": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM DA1 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_da1_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_da1_xpro.html"
  },"161": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"162": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"163": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"164": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script"
  },"165": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_e54_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d same5x -a 0x2000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#running-the-application"
  },"166": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"167": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e54_xpro.html"
  },"168": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Fail Safe Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-uart-fail-safe-bootloader-applications",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#building-and-running-the-uart-fail-safe-bootloader-applications"
  },"169": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_fail_safe_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e54_xpro.X | MPLABX Project for SAM E54 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#downloading-and-building-the-application"
  },"170": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM E54 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-sam-e54-xplained-pro-evaluation-kit"
  },"171": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC . | Refer to Bootloader App Merge Bin Help for setting up the btl_app_merge_bin.py utility used to merge the bootloader binary and application binary . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#setting-up-the-host-script"
  },"172": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_e54_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_e54_xpro.X in the IDE | Build and program the application using the IDE . | Launch MHC for the bootloader/firmware/sam_e54_xpro.X project . | Disable Fuse Settings . | Regenerate the project . | Enable Execute this line After Build option in MPLAB X Project properties-&gt;Building option . | . | Build the project to generate the bootloader binary (Do not program the binary) . | Run the btl_app_merge_bin.py from command prompt to merge the generated Bootloader binary and test application binary. Below output should be displayed on command prompt . python &lt;harmony3_path&gt;/bootloader/tools/btl_app_merge_bin.py -o 0x2000 -b &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin -a &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . | Run the btl_host.py from command prompt to program the merged binary to opposite panel. btl_app_merged.bin will be created in the current directory from where the btl_app_merge_bin.py was called . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d same5x -a 0x80000 -f &lt;Path_To_Merged_Binary&gt;/btl_app_merged.bin . | Following snapshot shows example output of successfully programming the merged binary . | Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | The NVM Flash Bank Can be BANK A or BANK B based on from where the test application is running | . | Press and hold the Switch SW0 to trigger Bootloader from test application to program firmware in other bank and you should see below output . | Disconnect UART console | Run the btl_host.py from command prompt to program only the test application binary to opposite panel . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -s -i &lt;COM PORT&gt; -d same5x -a 0x82000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro.X/dist/sam_e54_xpro/production/sam_e54_xpro.X.production.bin . | Repeat Steps 9-14 once . | This step is to verify that bootloader is running after triggering bootloader from test application in Step 15 | Also to program the new firmware in opposite bank | You should see other Bank in console displayed compared to first run | . | . Note: . If demo needs to be restarted from beginning . | Revert the changes done in Step 5 | Regenerate the project | Start from Step 4 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#running-the-application",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#running-the-application"
  },"173": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html#additional-steps-optional"
  },"174": {
    "doc": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM E54 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html",
    "relUrl": "/apps/uart_fail_safe_bootloader/docs/readme_sam_e54_xpro.html"
  },"175": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#building-and-running-the-uart-bootloader-applications"
  },"176": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_e70_xult.X | MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#downloading-and-building-the-application"
  },"177": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#setting-up-sam-e70-xplained-ultra-evaluation-kit"
  },"178": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#setting-up-the-host-script"
  },"179": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_e70_xult.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_e70_xult.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d same7x -a 0x402000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_e70_xult.X/dist/sam_e70_xult/production/sam_e70_xult.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED1 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED1 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#running-the-application"
  },"180": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html#additional-steps-optional"
  },"181": {
    "doc": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "title": "Building and Running on SAM E70 Xplained Ultra Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_e70_xult.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_e70_xult.html"
  },"182": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"183": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_g55_xpro.X | MPLABX Project for SAM G55 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_g55_xpro.X | MPLABX Project for SAM G55 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#downloading-and-building-the-application"
  },"184": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM G55 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#setting-up-sam-g55-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#setting-up-sam-g55-xplained-pro-evaluation-kit"
  },"185": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#setting-up-the-host-script"
  },"186": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_g55_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_g55_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samg5x -a 0x402000 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_g55_xpro.X/dist/sam_g55_xpro/production/sam_g55_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#running-the-application"
  },"187": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html#additional-steps-optional"
  },"188": {
    "doc": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM G55 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_g55_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_g55_xpro.html"
  },"189": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"190": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . Test Application . | Project Name | Description | . | test_app/firmware/sam_ha1_xpro.X | MPLABX Project for SAM HA1G16A Xplained Pro | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#downloading-and-building-the-application"
  },"191": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Setting up SAM HA1G16A Xplained Pro",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . Note . | ATSAMHA1G16A device in SAM HA1G16A Xplained Pro board is not recommended for new design, hence replace the device with ATSAMHA1G16AB device | Connect the supported external debugger to Cortex Debug Port | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-sam-ha1g16a-xplained-pro",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-sam-ha1g16a-xplained-pro"
  },"192": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#setting-up-the-host-script"
  },"193": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_ha1_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_ha1_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d samha1 -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_ha1_xpro.X/dist/sam_ha1_xpro/production/sam_ha1_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#running-the-application"
  },"194": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html#additional-steps-optional"
  },"195": {
    "doc": "Building and Running on SAM HA1G16A Xplained Pro",
    "title": "Building and Running on SAM HA1G16A Xplained Pro",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_ha1_xpro.html"
  },"196": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"197": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l10_xpro.X | MPLABX Project for SAM L10 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#downloading-and-building-the-application"
  },"198": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L10 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#setting-up-sam-l10-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#setting-up-sam-l10-xplained-pro-evaluation-kit"
  },"199": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#setting-up-the-host-script"
  },"200": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_l10_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_l10_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d saml1x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l10_xpro.X/dist/sam_l10_xpro/production/sam_l10_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Disconnect UART console | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#running-the-application"
  },"201": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html#additional-steps-optional"
  },"202": {
    "doc": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L10 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l10_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l10_xpro.html"
  },"203": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"204": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l21_xpro.X | MPLABX Project for SAM L21 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#downloading-and-building-the-application"
  },"205": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L21 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#setting-up-sam-l21-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#setting-up-sam-l21-xplained-pro-evaluation-kit"
  },"206": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#setting-up-the-host-script"
  },"207": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_l21_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_l21_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d saml2x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l21_xpro.X/dist/sam_l21_xpro/production/sam_l21_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#running-the-application"
  },"208": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html#additional-steps-optional"
  },"209": {
    "doc": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L21 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l21_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l21_xpro.html"
  },"210": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Building and Running the UART Bootloader applications",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#building-and-running-the-uart-bootloader-applications",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#building-and-running-the-uart-bootloader-applications"
  },"211": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github,go to the main page of this repository and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following these instructions . Path of the application within the repository is apps/uart_bootloader/ . To build the application, refer to the following table and open the project using its IDE. Bootloader Application . | Project Name | Description | . | bootloader/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . Test Application . | Project Name | Description | . | test_app/firmware/sam_l22_xpro.X | MPLABX Project for SAM L22 Xplained Pro Evaluation Kit | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#downloading-and-building-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#downloading-and-building-the-application"
  },"212": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Setting up SAM L22 Xplained Pro Evaluation Kit",
    "content": ". | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#setting-up-sam-l22-xplained-pro-evaluation-kit",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#setting-up-sam-l22-xplained-pro-evaluation-kit"
  },"213": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Setting up the host script",
    "content": ". | Refer to Bootloader Host Script Help for setting up the btl_host.py utility used to send the application binary from host PC | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#setting-up-the-host-script",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#setting-up-the-host-script"
  },"214": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Running the Application",
    "content": ". | Open the test application project test_app/firmware/sam_l22_xpro.X in the IDE | Build the project to generate the binary (Do not program the binary) | Open the bootloader project bootloader/firmware/sam_l22_xpro.X in the IDE | Build and program the application using the IDE . | Run the btl_host.py from command prompt to program the application binary . python &lt;harmony3_path&gt;/bootloader/tools/btl_host.py -v -i &lt;COM PORT&gt; -d saml2x -a 0x800 -f &lt;harmony3_path&gt;/bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l22_xpro.X/dist/sam_l22_xpro/production/sam_l22_xpro.X.production.bin . | Following snapshot shows output of successfully programming the test application . | Rebooting and Reboot Done messages in below output signifies that bootloading is successful | . | If above step is successful then the LED0 should start blinking | Open the Terminal application (Ex.:Tera Term) on the computer | Configure the serial port settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset or Power cycle the device | LED0 should start blinking and you should see below output on the console . | Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output . | Repeat Steps 5-11 once and jump to Step-14. | This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 | . | Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup | Repeat Steps 5-11 once . | This step is to verify whether bootloader is triggered by switch press at reset | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#running-the-application",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#running-the-application"
  },"215": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Additional Steps (Optional)",
    "content": ". | To bootload any other application refer to Application Configurations . | Once done repeat the applicable steps mentioned in Running The Application . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#additional-steps-optional",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html#additional-steps-optional"
  },"216": {
    "doc": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "title": "Building and Running on SAM L22 Xplained Pro Evaluation Kit",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/apps/uart_bootloader/docs/readme_sam_l22_xpro.html",
    "relUrl": "/apps/uart_bootloader/docs/readme_sam_l22_xpro.html"
  },"217": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"218": {
    "doc": "Release notes",
    "title": "UART Bootloader Applications Release v3.1.0",
    "content": "New Features . | This release includes support of . | UART Bootloader Applications for PIC32CM MC and PIC32MZ W1 family of 32-bit microcontrollers. | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | UART | UART Fail Safe | . | SAM D09/D10/D11 | SAM D11 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D20 | SAM D20 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM DA1 Xplained Pro Evaluation Kit | Yes | NA | . | SAM HA1 | SAM HA1G16A Xplained Pro | Yes | NA | . | SAM C20/C21 | SAM C21N Xplained Pro Evaluation Kit | Yes | NA | . | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L10/L11 | SAM L10 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | . | SAM G5x | SAM G55 Xplained Pro Evaluation Kit | Yes | NA | . | SAM E70/S70/V70/V71 | SAM E70 Xplained Ultra Evaluation Kit | Yes | NA | . | PIC32MX330/350/370/430/450/470 | Curiosity PIC32MX470 Development Board | Yes | NA | . | PIC32MX1XX/2XX/5XX | PIC32MX1/2/5 Starter Kit | Yes | NA | . | PIC32MK GPD/GPE/MCF | PIC32MK GP Development Kit | Yes | Yes | . | PIC32MK GPG/MCJ | PIC32MK MCJ Curiosity Pro | Yes | NA | . | PIC32MK GPK/MCM | PIC32MK MCM Curiosity Pro Development Board | Yes | Yes | . | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | Yes | Yes | . | PIC32MZ DA | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | Yes | Yes | . | PIC32MZ W1 | PIC32 WFI32E Curiosity Board | Yes | NA | . | PIC32CM MC | PIC32CM MC00 Curiosity Pro Evaluation Kit | Yes | NA | . | NA: Lack of product capability . | . Known Issues . | No changes from v3.0.0 | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® XC32 C/C++ Compiler v3.00 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony 3 Launcher v3.6.4 and above. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html#uart-bootloader-applications-release-v310",
    "relUrl": "/release_notes.html#uart-bootloader-applications-release-v310"
  },"219": {
    "doc": "Release notes",
    "title": "UART Bootloader Applications Release v3.0.2",
    "content": ". | Added discover.microchip.com metadata | . Known Issues . | No changes from v3.0.0 | . Development Tools . | No changes from v3.0.0 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html#uart-bootloader-applications-release-v302",
    "relUrl": "/release_notes.html#uart-bootloader-applications-release-v302"
  },"220": {
    "doc": "Release notes",
    "title": "UART Bootloader Applications Release v3.0.1",
    "content": ". | Updated test application projects to disable default linker file generation added in csp v3.8.0 as it requires custom linker file | . Known Issues . | No changes from v3.0.0 | . Development Tools . | No changes from v3.0.0 | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html#uart-bootloader-applications-release-v301",
    "relUrl": "/release_notes.html#uart-bootloader-applications-release-v301"
  },"221": {
    "doc": "Release notes",
    "title": "UART Bootloader Applications Release v3.0.0",
    "content": "New Features . | This release includes support of . | UART Bootloader Applications for SAM and PIC32M family of 32-bit microcontrollers. | UART Fail Safe Bootloader for devices with dual flash bank support. | . | . Development kit and demo application support . | The following table provides bootloader demo applications available for different development kits. | Product Family | Development Kits | UART | UART Fail Safe | . | SAM D09/D10/D11 | SAM D11 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D20 | SAM D20 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM D21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D21/DA1 | SAM DA1 Xplained Pro Evaluation Kit | Yes | NA | . | SAM HA1 | SAM HA1G16A Xplained Pro | Yes | NA | . | SAM C20/C21 | SAM C21N Xplained Pro Evaluation Kit | Yes | NA | . | SAM L21 | SAM L21 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L22 | SAM L22 Xplained Pro Evaluation Kit | Yes | NA | . | SAM L10/L11 | SAM L10 Xplained Pro Evaluation Kit | Yes | NA | . | SAM D5x/E5x | SAM E54 Xplained Pro Evaluation Kit | Yes | Yes | . | SAM G5x | SAM G55 Xplained Pro Evaluation Kit | Yes | NA | . | SAM E70/S70/V70/V71 | SAM E70 Xplained Ultra Evaluation Kit | Yes | NA | . | PIC32MX330/350/370/430/450/470 | Curiosity PIC32MX470 Development Board | Yes | NA | . | PIC32MX1XX/2XX/5XX | PIC32MX1/2/5 Starter Kit | Yes | NA | . | PIC32MK GPD/GPE/MCF | PIC32MK GP Development Kit | Yes | Yes | . | PIC32MK GPG/MCJ | PIC32MK MCJ Curiosity | Yes | NA | . | PIC32MK GPK/MCM | PIC32MK MCM Curiosity | Yes | Yes | . | PIC32MZ EF | PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit | Yes | Yes | . | PIC32MZ DA | PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) | Yes | Yes | . | NA: Lack of product capability . | . Known Issues . The current known issues are as follows: . | Initialized global variables will not be initialized at startup for UART bootloaders. | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® XC32 C/C++ Compiler v2.41 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.5.0 and above. | . | . ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html#uart-bootloader-applications-release-v300",
    "relUrl": "/release_notes.html#uart-bootloader-applications-release-v300"
  },"222": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/bootloader_apps_uart/release_notes.html",
    "relUrl": "/release_notes.html"
  },"223": {
    "doc": "UART Bootloader Applications",
    "title": "UART Bootloader Applications",
    "content": "![Microchip logo](https://raw.githubusercontent.com/wiki/Microchip-MPLAB-Harmony/Microchip-MPLAB-Harmony.github.io/images/microchip_logo.png) # MPLAB® Harmony 3 UART Bootloader Application Examples MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 UART Bootloader application examples - [Release Notes](/bootloader_apps_uart/release_notes.html) - [MPLAB® Harmony License](/bootloader_apps_uart/mplab_harmony_license.html) To clone or download these application from Github,go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_uart) and then click Clone button to clone this repo or download as zip file. This content can also be download using content manager by following [these instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki) ## Contents Summary | Folder | Description | --- | --- | apps | UART Bootloader example applications | docs | Applications help documentation | ## Bootloader Examples The following applications are provided to demonstrate the UART bootloader | Name | Description | -------- | ----------- | [UART Bootloader](/bootloader_apps_uart/apps/uart_bootloader/readme.html) | This example application shows how to use the Bootloader Library to bootload an application using UART protocol | [UART Fail Safe Bootloader](/bootloader_apps_uart/apps/uart_fail_safe_bootloader/readme.html) | This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using UART protocol | ## Bootloader Library Refer to [Bootloader Library Help](https://microchip-mplab-harmony.github.io/bootloader) for understanding - Bootloader framework - How the Bootloader library works - Bootloader library configurations - Bootloader memory layout ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_uart/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_uart/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_uart/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg)](https://github.com/Microchip-MPLAB-Harmony/bootloader_apps_uart/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/bootloader_apps_uart.svg?style=social)]() ",
    "url": "http://localhost:4000/bootloader_apps_uart/",
    "relUrl": "/"
  }
}
