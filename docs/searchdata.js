var SearchFiles = ["GUID-B72472E8-6E25-4036-8A27-70D70540E725.html",
							"GUID-2A9EAD6F-16A9-48AC-AB83-C48C263D2A5F.html",
							"GUID-2944FF2A-E4AB-4484-B633-BA7CC8548776.html",
							"GUID-42D84285-93F2-4FD2-871A-0828314912BB.html",
							"GUID-5FF5350E-BCA2-4E45-BEA5-52D149A8B431.html",
							"GUID-DDBFDA79-86F5-4F5A-B8CD-AB394574F8CF.html",
							"GUID-AEAD41EE-0D73-4B4B-B70D-B68E9468CA78.html",
							"GUID-AC56DC8B-E361-4197-905E-9B7B4C6CA40E.html",
							"GUID-87E4439D-6C0F-408C-A8C2-1D0229305953.html",
							"GUID-3D0838F0-EC06-4839-B2B5-66BD9DC0E0FB.html",
							"GUID-33066924-6225-4AFF-8B56-80E5BE5403E3.html",
							"GUID-524555EE-DF75-45F8-9C8F-11DDB643E5B3.html",
							"GUID-BE64A17B-CC65-4885-BF3C-883F21476F8B.html",
							"GUID-5C28548E-4C92-47F9-867C-6C2837FE9F2C.html",
							"GUID-F6B9FB47-BB62-4469-B2EE-2AF1FAA5B1B7.html",
							"GUID-5EDCD213-F7D4-40C5-93CD-8029AF0EA508.html",
							"GUID-11A7D40E-3186-4485-B06E-B92E76B18266.html",
							"GUID-60B58CE9-CE65-4C42-A219-1832B2C1B802.html",
							"GUID-49B5A844-7AF8-4654-BF6D-E180C62300F6.html",
							"GUID-1D463AB0-06E6-4FF3-AD77-F6772A092015.html",
							"GUID-AD45B550-548F-4AB0-9A6F-AFC6ED8EC005.html",
							"GUID-A53ECC58-D494-4DF6-A7F2-F9244E5833D7.html",
							"GUID-B882700A-3970-454E-A3C0-C7C17297B438.html",
							"GUID-A8350647-8A43-43D5-8813-E9E69F137E7E.html",
							"GUID-7F3D5F78-5918-4104-902C-5D508BBED0FD.html",
							"GUID-377F58DE-943A-4B7D-9368-77A27B53CB6C.html",
							"GUID-6E6C43D2-CD52-4D84-A525-24DE252958A2.html",
							"GUID-01B2189B-368F-49D6-8400-6A994E6B96DA.html",
							"GUID-C56D70BA-4824-4E3E-A6FC-BB2DE123D81A.html",
							"GUID-FF183F68-D719-491F-A013-76044AD83756.html",
							"GUID-4C0F39DE-6971-4A2F-B33A-E203BA5A9119.html",
							"GUID-E9768065-2540-409B-AC12-3DA9417F01F5.html",
							"GUID-1533B544-211D-4FA3-A80B-B55B97CB0311.html",
							"GUID-3E6213D5-3312-49A9-A6C7-897B8AD57414.html",
							"GUID-CC123855-6D3C-458D-8A42-C73711B21E4F.html"];

var SearchTitles = ["MPLAB® Harmony Bootloader Application Examples for UART",
"UART Bootloader",
"PIC32CM MC00 Curiosity Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"PIC32MK GP Development Kit: Building and Running the UART Bootloader applications",
"PIC32MK MCJ Curiosity Pro: Building and Running the UART Bootloader applications",
"PIC32MK MCM Curiosity Pro Development Board: Building and Running the UART Bootloader applications",
"PIC32MX 1/2/5 Starter Kit: Building and Running the UART Bootloader applications",
"PIC32MX Curiosity Development Board: Building and Running the UART Bootloader applications",
"PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto): Building and Running the UART Bootloader applications",
"PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit: Building and Running the UART Bootloader applications",
"PIC32 WFI32E Curiosity Board: Building and Running the UART Bootloader applications",
"SAM C21N Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM D11 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM D20 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM D21 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM DA1 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM E54 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM E70 Xplained Ultra Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM G55 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM HA1G16A Xplained Pro: Building and Running the UART Bootloader applications",
"SAM L10 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM L21 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"SAM L22 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications",
"UART Fail Safe Bootloader",
"PIC32MK GP Development Kit: Building and Running the UART Fail Safe Bootloader applications",
"PIC32MK MCM Curiosity Pro Development Board: Building and Running the UART Fail Safe Bootloader applications",
"PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto): Building and Running the UART Fail Safe Bootloader applications",
"PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit: Building and Running the UART Fail Safe Bootloader applications",
"SAM E54 Xplained Pro Evaluation Kit: Building and Running the UART Fail Safe Bootloader applications",
"UART Bootloader Tools Help",
"Bootloader and Application binary merge script Help",
"Bootloader Host Script Help",
"Configuring an Application to be bootloaded",
"Configuring an application to be bootloaded for MIPS based MCUs",
"Configuring an application to be bootloaded for CORTEX-M based MCUs"];

var SearchInfo = [" MPLAB® Harmony Bootloader Application Examples for UART MPLAB® Harmony is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices This repository contains the MPLAB® Harmony 3 UART Bootloader application examples Bootloader Library Refer to Bootloader Library Help for understanding Bootloader framework How the Bootloader library works Bootloader library configurations Bootloader memory layout Bootloader Examples The following applications are provided to demonstrate the UART bootloader Name Description UART Bootloader This example application shows how to use the Bootloader Library to bootload an application using UART protocol UART Fail Safe Bootloader This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using UART protocol ",
							" UART Bootloader This example application shows how to use the Bootloader Library to bootload an application using UART protocol Bootloader Application This is a bootloader application which resides from The starting location of the flash memory region for SAM devices The start of Program Flash memory for PIC32MX devices with 3KB bootflash memory The starting location of the Boot flash memory region for PIC32MK PIC32MX and PIC32MZ devices It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive application binary from host PC It calls the bootloader_Tasks() function which receives application to be programmed into flash memory over UART channel Trigger Methods It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device Test Application This is a test application which resides from The end of bootloader size in device flash memory for SAM devices The end of bootloader size in Program Flash memory for PIC32MX devices with 3KB bootflash memory The start of Program Flash memory for PIC32MK PIC32MX and PIC32MZ devices It will be loaded into flash memory by bootloader application It blinks an LED and provides console output It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device Development Kits The following list provides links to documentation on how to build and run UART bootloader on different development kits ",
							" PIC32CM MC00 Curiosity Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32cm_mc00_curiosity_pro X MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit Test Application Project Name Description test_app/firmware/pic32cm_mc00_curiosity_pro X MPLABX Project for PIC32CM MC00 Curiosity Pro Evaluation Kit Setting up PIC32CM MC00 Curiosity Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32cm_mc00_curiosity_pro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32cm_mc00_curiosity_pro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32cm -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32cm_mc00_curiosity_pro X/dist/pic32cm_mc00_curiosity_pro/production/pic32cm_mc00_curiosity_pro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" PIC32MK GP Development Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mk_gp_db X MPLABX Project for PIC32MK GP Development Kit Test Application Project Name Description test_app/firmware/pic32mk_gp_db X MPLABX Project for PIC32MK GP Development Kit Setting up PIC32MK GP Development Kit Connect a micro USB cable to the USB to UART port J25 This will enumerate as a COM port on the PC For programming Connect a micro USB cable to the USB DEBUG port J12 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mk_gp_db X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mk_gp_db X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mk -a 0x9D000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_gp_db X/dist/pic32mk_gp_db/production/pic32mk_gp_db X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch S1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch S1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MK MCJ Curiosity Pro: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mk_mcj_curiosity_pro X MPLABX Project for PIC32MK MCJ Curiosity Pro Test Application Project Name Description test_app/firmware/pic32mk_mcj_curiosity_pro X MPLABX Project for PIC32MK MCJ Curiosity Pro Setting up PIC32MK MCJ Curiosity Pro Install an USB UART click board on to the mikroBUS Xplained Pro board Connect the mikroBUS Xplained Pro board to the J501 header of the PIC32MK MCJ Curiosity Pro Connect mini USB cable to the USB UART click board This will enumerate the USB to UART port For programming Connect micro USB cable to the 'Debug USB' connector(J1) on the board to the computer Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mk_mcj_curiosity_pro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mk_mcj_curiosity_pro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mk -a 0x9D000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_mcj_curiosity_pro X/dist/pic32mk_mcj_curiosity_pro/production/pic32mk_mcj_curiosity_pro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED2 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED2 should start blinking and you should see below output on the console output Press and hold the Switch SW200 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW200 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MK MCM Curiosity Pro Development Board: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mk_mcm_curiosity_pro X MPLABX Project for PIC32MK MCM Curiosity Pro Development Board Test Application Project Name Description test_app/firmware/pic32mk_mcm_curiosity_pro X MPLABX Project for PIC32MK MCM Curiosity Pro Development Board Setting up PIC32MK MCM Curiosity Pro Development Board Connect a micro USB cable to the USB to UART port J400 This will enumerate as a COM port on the PC For programming Connect a micro USB cable to the USB DEBUG port J500 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mk_mcm_curiosity_pro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mk_mcm_curiosity_pro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mk -a 0x9D000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mk_mcm_curiosity_pro X/dist/pic32mk_mcm_curiosity_pro/production/pic32mk_mcm_curiosity_pro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MX 1/2/5 Starter Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mx_125_sk X MPLABX Project for PIC32MX 1/2/5 Starter Kit Test Application Project Name Description test_app/firmware/pic32mx_125_sk X MPLABX Project for PIC32MX 1/2/5 Starter Kit Setting up PIC32MX 1/2/5 Starter Kit Mount PIC32MX 1/2/5 Starter Kit on the J1 connector of Starter Kit I/O Expansion Board Connect TX pin of USB UART click to U2RX pin of J11 header on Starter Kit I/O Expansion Board Connect RX pin of USB UART click to U2TX pin of J11 header on Starter Kit I/O Expansion Board Connect GND pin of USB UART click to GND pin of J11 header on Starter Kit I/O Expansion Board Connect mini USB cable to the USB UART click board This will enumerate the USB to UART port For programming Connect mini USB cable to the 'Debug USB' connector(J3) on the PIC32MX 1/2/5 Starter Kit to the computer Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mx_125_sk X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mx_125_sk X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mx -a 0x9D001000 -p 1024 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mx_125_sk X/dist/pic32mx_125_sk/production/pic32mx_125_sk X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MX Curiosity Development Board: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mx470_curiosity X MPLABX Project for PIC32MX Curiosity Development Board Test Application Project Name Description test_app/firmware/pic32mx470_curiosity X MPLABX Project for PIC32MX Curiosity Development Board Setting up PIC32MX Curiosity Development Board Install an USB UART click board on to the mikroBUS socket J5 Connect mini USB cable to the USB UART click board This will enumerate the USB to UART port Note: Ensure that the series resistors on the mikroBUS headers are of value 0 Ohms For programming Connect mini USB cable to the 'Debug USB' connector(J3) on the board to the computer Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mx470_curiosity X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mx470_curiosity X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mx -a 0x9D000000 -p 4096 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mx470_curiosity X/dist/pic32mx470_curiosity/production/pic32mx470_curiosity X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch S1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch S1 and then press MCLR button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto): Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mz_das_sk X MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Test Application Project Name Description test_app/firmware/pic32mz_das_sk X MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Connect a micro USB cable to the UART-USB port J5 For programming connect a micro USB cable to the USB Debug port J19 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mz_das_sk X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mz_das_sk X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mz -a 0x9D000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_das_sk X/dist/pic32mz_das_sk/production/pic32mz_das_sk X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mz_ef_sk X MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Test Application Project Name Description test_app/firmware/pic32mz_ef_sk X MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Connect a mini USB cable to the UART-USB port J11 For programming connect a mini USB cable to the USB Debug port J3 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mz_ef_sk X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mz_ef_sk X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mz -a 0x9D000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_ef_sk X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console output Press and hold the Switch SW1 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW1 and then Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32 WFI32E Curiosity Board: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mz_w1_curiosity X MPLABX Project for PIC32 WFI32E Curiosity Board Test Application Project Name Description test_app/firmware/pic32mz_w1_curiosity X MPLABX Project for PIC32 WFI32E Curiosity Board Setting up PIC32 WFI32E Curiosity Board Connect the Debug USB port on the board to the computer using a micro USB cable On the GPIO Header (J207) connect U1RX (PIN 13) and U1TX (PIN 23) to TX and RX pin of any USB to UART converter (for eg: USB UART click board ) Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mz_w1_curiosity X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mz_w1_curiosity X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d pic32mzw -a 0x90000000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/pic32mz_w1_curiosity X/dist/pic32mz_w1_curiosity/production/pic32mz_w1_curiosity X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the RED LED (D202) should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device RED LED (D202) should start blinking and you should see below output on the console output Press and hold the Switch SW1/SW200 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW1/SW200 and then Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" SAM C21N Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_c21n_xpro X MPLABX Project for SAM C21N Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_c21n_xpro X MPLABX Project for SAM C21N Xplained Pro Evaluation Kit Setting up SAM C21N Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_c21n_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_c21n_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samc2x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_c21n_xpro X/dist/sam_c21n_xpro/production/sam_c21n_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" SAM D11 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_d11_xpro X MPLABX Project for SAM D11 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_d11_xpro X MPLABX Project for SAM D11 Xplained Pro Evaluation Kit Setting up SAM D11 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_d11_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_d11_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samd1x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d11_xpro X/dist/sam_d11_xpro/production/sam_d11_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM D20 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_d20_xpro X MPLABX Project for SAM D20 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_d20_xpro X MPLABX Project for SAM D20 Xplained Pro Evaluation Kit Setting up SAM D20 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_d20_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_d20_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samd2x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d20_xpro X/dist/sam_d20_xpro/production/sam_d20_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM D21 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_d21_xpro X MPLABX Project for SAM D21 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_d21_xpro X MPLABX Project for SAM D21 Xplained Pro Evaluation Kit Setting up SAM D21 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_d21_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_d21_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samd2x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_d21_xpro X/dist/sam_d21_xpro/production/sam_d21_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM DA1 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_da1_xpro X MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_da1_xpro X MPLABX Project for SAM DA1 Xplained Pro Evaluation Kit Setting up SAM DA1 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_da1_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_da1_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samda1 -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_da1_xpro X/dist/sam_da1_xpro/production/sam_da1_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM E54 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_e54_xpro X MPLABX Project for SAM E54 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_e54_xpro X MPLABX Project for SAM E54 Xplained Pro Evaluation Kit Setting up SAM E54 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_e54_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_e54_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d same5x -a 0x2000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_e54_xpro X/dist/sam_e54_xpro/production/sam_e54_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM E70 Xplained Ultra Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_e70_xult X MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit Test Application Project Name Description test_app/firmware/sam_e70_xult X MPLABX Project for SAM E70 Xplained Ultra Evaluation Kit Setting up SAM E70 Xplained Ultra Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_e70_xult X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_e70_xult X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d same7x -a 0x402000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_e70_xult X/dist/sam_e70_xult/production/sam_e70_xult X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED1 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED1 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM G55 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_g55_xpro X MPLABX Project for SAM G55 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_g55_xpro X MPLABX Project for SAM G55 Xplained Pro Evaluation Kit Setting up SAM G55 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_g55_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_g55_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samg5x -a 0x402000 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_g55_xpro X/dist/sam_g55_xpro/production/sam_g55_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM HA1G16A Xplained Pro: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_ha1_xpro X MPLABX Project for SAM HA1G16A Xplained Pro Test Application Project Name Description test_app/firmware/sam_ha1_xpro X MPLABX Project for SAM HA1G16A Xplained Pro Setting up SAM HA1G16A Xplained Pro Connect the Debug USB port on the board to the computer using a micro USB cable Note ATSAMHA1G16A device in SAM HA1G16A Xplained Pro board is not recommended for new design hence replace the device with ATSAMHA1G16AB device Connect the supported external debugger to Cortex Debug Port Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_ha1_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_ha1_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d samha1 -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_ha1_xpro X/dist/sam_ha1_xpro/production/sam_ha1_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM L10 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_l10_xpro X MPLABX Project for SAM L10 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_l10_xpro X MPLABX Project for SAM L10 Xplained Pro Evaluation Kit Setting up SAM L10 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_l10_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_l10_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d saml1x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l10_xpro X/dist/sam_l10_xpro/production/sam_l10_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Disconnect UART console Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM L21 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_l21_xpro X MPLABX Project for SAM L21 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_l21_xpro X MPLABX Project for SAM L21 Xplained Pro Evaluation Kit Setting up SAM L21 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_l21_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_l21_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d saml2x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l21_xpro X/dist/sam_l21_xpro/production/sam_l21_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" SAM L22 Xplained Pro Evaluation Kit: Building and Running the UART Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_l22_xpro X MPLABX Project for SAM L22 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_l22_xpro X MPLABX Project for SAM L22 Xplained Pro Evaluation Kit Setting up SAM L22 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/sam_l22_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_l22_xpro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the application binary python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d saml2x -a 0x800 -f harmony3_path /bootloader_apps_uart/apps/uart_bootloader/test_app/firmware/sam_l22_xpro X/dist/sam_l22_xpro/production/sam_l22_xpro X production bin Following snapshot shows output of successfully programming the test application Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console output Press and hold the Switch SW0 to trigger Bootloader from test application and you should see below output output Repeat Steps 5-11 once and jump to Step-14 This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Press and hold the Switch SW0 and then press Reset button or Power cycle the device to force trigger bootloader at startup Repeat Steps 5-11 once This step is to verify whether bootloader is triggered by switch press at reset Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" UART Fail Safe Bootloader This example application shows how to use the Bootloader Library to bootload an application on device having dual flash bank feature using UART protocol Bootloader Application This is a fail safe bootloader application which resides from The starting location of both the banks of device flash memory region for SAM devices with dual bank support The starting location of the Boot flash memory region for PIC32M devices with dual bank support It uses the Virtual Com port of the device (EDBG port or External USB to UART converters) to receive application binary from host PC It calls the bootloader_Tasks() function which receives application to be programmed into opposite bank of flash memory over UART channel Trigger methods It uses the On board Switch as bootloader trigger pin to force enter the bootloader at reset of device It checks for bootloader request pattern (0x5048434D) from the starting 16 Bytes of RAM to force enter bootloader at reset of device Test Application This is a test application which resides from The end of bootloader size in device flash memory for SAM devices with dual bank support The start of Program Flash memory for PIC32MZ PIC32MK devices with dual bank support The last ROW of each bank is reserved for storing the serial number which is updated by bootloader after every firmware upgrade It will be loaded into flash memory by bootloader application It blinks an LED and provides console output It uses the On board Switch to trigger the bootloader from firmware (May not be supported on all devices) Once the switch is pressed it loads first 16 bytes of RAM with bootloader request pattern (0x5048434D) and resets the device Development Kits The following table provides links to documentation on how to build and run UART Fail Safe bootloader on different development kits ",
							" PIC32MK GP Development Kit: Building and Running the UART Fail Safe Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_fail_safe_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mk_gp_db X MPLABX Project for PIC32MK GP Development Kit Test Application Project Name Description test_app/firmware/pic32mk_gp_db X MPLABX Project for PIC32MK GP Development Kit Setting up PIC32MK GP Development Kit Connect a micro USB cable to the USB to UART port J25 This will enumerate as a COM port on the PC For programming Connect a micro USB cable to the USB DEBUG port J12 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mk_gp_db X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mk_gp_db X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the test application binary to opposite panel python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d pic32mk -a 0x9D080000 -f harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mk_gp_db X/dist/pic32mk_gp_db/production/pic32mk_gp_db X production bin Following snapshot shows output of successfully programming the test application Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running output output Press and hold the Switch S1 to trigger Bootloader from test application to program firmware in other bank and you should see below output output Repeat Steps 5-11 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Also to program the new firmware in opposite bank You should see other Bank in console displayed compared to first run Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MK MCM Curiosity Pro Development Board: Building and Running the UART Fail Safe Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_fail_safe_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mk_mcm_curiosity_pro X MPLABX Project for PIC32MK MCM Curiosity Pro Development Board Test Application Project Name Description test_app/firmware/pic32mk_mcm_curiosity_pro X MPLABX Project for PIC32MK MCM Curiosity Pro Development Board Setting up PIC32MK MCM Curiosity Pro Development Board Connect a micro USB cable to the USB to UART port J400 This will enumerate as a COM port on the PC For programming Connect a micro USB cable to the USB DEBUG port J500 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mk_mcm_curiosity_pro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mk_mcm_curiosity_pro X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the test application binary to opposite panel python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d pic32mk -a 0x9D080000 -f harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mk_mcm_curiosity_pro X/dist/pic32mk_mcm_curiosity_pro/production/pic32mk_mcm_curiosity_pro X production bin Following snapshot shows output of successfully programming the test application Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running output output Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output output Repeat Steps 5-11 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Also to program the new firmware in opposite bank You should see other Bank in console displayed compared to first run Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto): Building and Running the UART Fail Safe Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_fail_safe_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mz_das_sk X MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Test Application Project Name Description test_app/firmware/pic32mz_das_sk X MPLABX Project for PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Setting up PIC32MZ Embedded Graphics with Stacked DRAM (DA) Starter Kit (Crypto) Connect a micro USB cable to the UART-USB port J5 For programming connect a micro USB cable to the USB Debug port J19 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mz_das_sk X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mz_das_sk X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the test application binary to opposite panel python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d pic32mz -a 0x9D100000 -f harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mz_das_sk X/dist/pic32mz_das_sk/production/pic32mz_das_sk X production bin Following snapshot shows output of successfully programming the test application Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running output output Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output output Repeat Steps 5-11 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Also to program the new firmware in opposite bank You should see other Bank in console displayed compared to first run Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit: Building and Running the UART Fail Safe Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_fail_safe_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/pic32mz_ef_sk X MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Test Application Project Name Description test_app/firmware/pic32mz_ef_sk X MPLABX Project for PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Setting up PIC32MZ Embedded Connectivity with FPU (EF) Starter Kit Connect a mini USB cable to the UART-USB port J11 For programming connect a mini USB cable to the USB Debug port J3 Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Running the Application Open the test application project test_app/firmware/pic32mz_ef_sk X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/pic32mz_ef_sk X in the IDE Build and program the application using the IDE Run the btl_host py from command prompt to program the test application binary to opposite panel python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d pic32mz -a 0x9D100000 -f harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/pic32mz_ef_sk X/dist/pic32mz_ef_sk/production/pic32mz_ef_sk X production bin Following snapshot shows output of successfully programming the test application Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED3 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED3 should start blinking and you should see below output on the console The Program Flash Bank Can be BANK 1 or BANK 2 based on from where the program is running output output Press and hold the Switch SW1 to trigger Bootloader from test application to program firmware in other bank and you should see below output output Repeat Steps 5-11 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 12 Also to program the new firmware in opposite bank You should see other Bank in console displayed compared to first run Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for MIPS based MCUs ",
							" SAM E54 Xplained Pro Evaluation Kit: Building and Running the UART Fail Safe Bootloader applications Downloading and building the application To clone or download this application from Github go to the main page of this repository and then click Clone button to clone this repo or download as zip file This content can also be download using content manager by following these instructions Path of the application within the repository is apps/uart_fail_safe_bootloader/ To build the application refer to the following table and open the project using its IDE Bootloader Application Project Name Description bootloader/firmware/sam_e54_xpro X MPLABX Project for SAM E54 Xplained Pro Evaluation Kit Test Application Project Name Description test_app/firmware/sam_e54_xpro X MPLABX Project for SAM E54 Xplained Pro Evaluation Kit Setting up SAM E54 Xplained Pro Evaluation Kit Connect the Debug USB port on the board to the computer using a micro USB cable Setting up the host script Refer to Bootloader Host Script Help for setting up the btl_host py utility used to send the application binary from host PC Refer to Bootloader App Merge Bin Help for setting up the btl_app_merge_bin py utility used to merge the bootloader binary and application binary btl_app_merge_bin Running the Application Open the test application project test_app/firmware/sam_e54_xpro X in the IDE Build the project to generate the binary (Do not program the binary) Open the bootloader project bootloader/firmware/sam_e54_xpro X in the IDE Build and program the application using the IDE Launch MHC for the bootloader/firmware/sam_e54_xpro X project Disable Fuse Settings mhcSetting Regenerate the project Enable Execute this line After Build option in MPLAB X Project properties- Building option buildOption Build the project to generate the bootloader binary (Do not program the binary) Run the btl_app_merge_bin py from command prompt to merge the generated Bootloader binary and test application binary Below output should be displayed on command prompt python harmony3_path /bootloader/tools/btl_app_merge_bin py -o 0x2000 -b harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/bootloader/firmware/sam_e54_xpro X/dist/sam_e54_xpro/production/sam_e54_xpro X production bin -a harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro X/dist/sam_e54_xpro/production/sam_e54_xpro X production bin output Run the btl_host py from command prompt to program the merged binary to opposite panel btl_app_merged bin will be created in the current directory from where the btl_app_merge_bin py was called python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d same5x -a 0x80000 -f Path_To_Merged_Binary /btl_app_merged bin Following snapshot shows example output of successfully programming the merged binary Swapping Bank And Rebooting and Reboot Done messages in below output signifies that bootloading is successful output If above step is successful then the LED0 should start blinking Open the Terminal application (Ex :Tera Term) on the computer Configure the serial port settings as follows: Baud : 115200 Data : 8 Bits Parity : None Stop : 1 Bit Flow Control : None Reset or Power cycle the device LED0 should start blinking and you should see below output on the console The NVM Flash Bank Can be BANK A or BANK B based on from where the test application is running output output Press and hold the Switch SW0 to trigger Bootloader from test application to program firmware in other bank and you should see below output output Disconnect UART console Run the btl_host py from command prompt to program only the test application binary to opposite panel python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d same5x -a 0x82000 -f harmony3_path /bootloader_apps_uart/apps/uart_fail_safe_bootloader/test_app/firmware/sam_e54_xpro X/dist/sam_e54_xpro/production/sam_e54_xpro X production bin Repeat Steps 9-14 once This step is to verify that bootloader is running after triggering bootloader from test application in Step 15 Also to program the new firmware in opposite bank You should see other Bank in console displayed compared to first run Note: If demo needs to be restarted from beginning Revert the changes done in Step 5 Regenerate the project Start from Step 4 Additional Steps (Optional) To bootload any other application refer to Configuring an application to be bootloaded for CORTEX-M based MCUs ",
							" UART Bootloader Tools Help This document describes the usage of UART bootloader host tools Following host tools are provided to be used with different bootloaders Host Script Description btl_host py Used to communicate with the Bootloader running on the device via UART interface btl_app_merge_bin py Used to merge the bootloader binary and application binary ",
							" Bootloader and Application binary merge script Help This document describes the usage of btl_app_merge_bin py host script Path of the tool in bootloader repository is tools/btl_app_merge_bin py Setting up the Host PC The Script is compatible with Python 3 x and higher Description This script should be used to merge the bootloader binary and application binary It creates a merged binary output where bootloader is placed from start and the application will be placed at the offset passed as parameter If the application offset is not equal to end of bootloader offset it fills the gap with 0xFF until the application offset The merged binary can be used by btl_host py as input for Updating bootloader and application together The merged binary will be created in the directory from where the script was called btl_app_merge_bin Usage Examples Below is the syntax to show help menu for the script python harmony3_path /bootloader/tools/btl_app_merge_bin py --help images/btl_app_merge_bin_help_menu Below is the syntax and an example on how to merge a bootloader binary and application binary python harmony3_path /bootloader/tools/btl_app_merge_bin py -o Offset -b Bootloader_binary_path -a Application_binary_path python  harmony3_path  / bootloader / tools / btl_app_merge_bin  py - o 0x2000  - b  harmony3_path  / bootloader_apps_uart / apps / uart_fail_safe_bootloader / bootloader / firmware / sam_e54_xpro  X / dist / sam_e54_xpro / production / sam_e54_xpro  X  production  bin - a  harmony3_path  / bootloader_apps_uart / apps / uart_fail_safe_bootloader / test_app / firmware / sam_e54_xpro  X / dist / sam_e54_xpro / production / sam_e54_xpro  X  production  bin btl_app_merge_bin_output python  harmony3_path  / bootloader / tools / btl_host  py - v - s - i COM18 - d same5x - a 0x80000  - f  Path_to_merged_binary  / btl_app_merged  bin btl_host_swap_bank_output ",
							" Bootloader Host Script Help This document describes the usage of btl_host py host script Path of the tool in bootloader repository is tools/btl_host py Setting up the Host PC The Script is compatible with Python 3 x and higher It requires pyserial package to communicate with device over UART Use below command to install the pyserial package pip3 install pyserial Description This host script should be used to communicate with the Bootloader running on the device via UART interface It is a command line interface and implements the bootloader protocol required to communicate from host PC If size of the input binary file is not aligned to device erase boundary it appends 0xFF to the binary to make it aligned and then sends the binary to the device It should be used with -s (--swap) option when using bootloader in fail safe update mode to trigger a swap bank and reset It should be used with -b (--boot) option with address as 0x0 when updating the bootloader itself on CORTEX-M based MCUs Usage Examples Below is the syntax to show help menu for the script python harmony3_path /bootloader/tools/btl_host py --help btl_host_help_menu Bootloader basic mode syntax and example Below syntax and example can be used to program a binary and send a Reset command python harmony3_path /bootloader/tools/btl_host py -v -i COM PORT -d Device Name -a address -f Application_binary_path python  harmony3_path  / bootloader / tools / btl_host  py - v - i COM18 - d same5x - a 0x2000  - f  harmony3_path  / bootloader_apps_uart / apps / uart_bootloader / test_app / firmware / sam_e54_xpro  X / dist / sam_e54_xpro / production / sam_e54_xpro  X  production  bin btl_host_output Bootloader Fail Safe Update mode syntax and example Below syntax and example can be used to program a binary in Inactive Bank and send a Swap Bank and Reset command python harmony3_path /bootloader/tools/btl_host py -v -s -i COM PORT -d Device Name -a Inactive Bank address -f Path to application binary Example to send Bootloader binary in inactive bank python  harmony3_path  / bootloader / tools / btl_host  py - v - s - i COM18 - d same5x - a 0x80000  - f  harmony3_path  / bootloader_apps_uart / apps / uart_fail_safe_bootloader / bootloader / firmware / sam_e54_xpro  X / dist / sam_e54_xpro / production / sam_e54_xpro  X  production  bin Example to send Application binary in inactive bank python  harmony3_path  / bootloader / tools / btl_host  py - v - s - i COM18 - d same5x - a 0x82000  - f  harmony3_path  / bootloader_apps_uart / apps / uart_fail_safe_bootloader / test_app / firmware / sam_e54_xpro  X / dist / sam_e54_xpro / production / sam_e54_xpro  X  production  bin btl_host_swap_bank_output ",
							" Configuring an Application to be bootloaded To bootload a CORTEX-M based application refer to Application Configurations for CORTEX-M based MCUs To bootload a MIPS based application refer to Application Configurations for MIPS based MCUs ",
							" Configuring an application to be bootloaded for MIPS based MCUs Bootloader placement for various PIC32M product families The bootloader is placed in Boot Flash Memory (BFM) or Program Flash Memory (PFM) based on the size of the bootloader and available Boot flash memory on the device If the bootloader fits into the available BFM it is placed in BFM The user application can use the complete area of the program Flash memory If the bootloader does not fit into the available BFM it is placed in PFM The user application can use the remaining area of the program Flash memory The following table shows the available Boot Flash memory and the placement of different bootloaders by product family bootloader_placement Setting up the Application linker script The linker script file of the application project has to be modified to place the vector table and reset handlers in program flash memory For Quick start Refer to pre developed application linker scripts app_XX ld placed in projects device specific configuration folder of bootloader_apps_xxx/ repository Reset Address for the application to be loaded through bootloader should match the Application start address mentioned in bootloader project The vector address of a given interrupt is calculated using Exception Base (EBASE) CPU register and the _ebase_address should be aligned to 4KB boundary Note: The below sections provides overview of changes required in the applications linker scripts The address location and size may vary based on the specific device used For Bootloaders placed in Boot Flash Memory (PIC32MZ and PIC32MK Devices) The application start address by default will be start of program flash memory Refer to specific device datasheet for program flash memory start address and length The Initial 4KB from Application start address are used by Reset Handler and and cache_init section XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs If the EBASE address is aligned to 4KB then all the interrupt vectors must be located within the 4KB from base address Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx 0x1000) then the bitwise OR operator may not provide correct interrupt vector address To provide maximum flexibility in placement of interrupt vectors: Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script Change the offsets of exceptions and vector section to place them after the device startup code With this the interrupt handlers can be located anywhere in the Program Flash memory Updated linker scripts as explained above is shown here as an example Note: Cache related sections are not applicable for PIC32MK Devices PROVIDE ( _vector_spacing =  0x0001 ) ;  PROVIDE ( _ebase_address =  0x9D000000 ) ;  /* Place the vector table and other exceptions after the device reset and * cache init code */  PROVIDE ( _ebase_vector_offsets =  0x1000 ) ; _RESET_ADDR =  0xBD000000 ; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets +  0 ; _CACHE_ERR_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets +  0x100 ; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets +  0x180 ; kseg0_program_mem ( rx )  : ORIGIN =  0x9D001000  LENGTH =  0x200000  -  0x1000 kseg1_boot_mem : ORIGIN =  0xBD000000  LENGTH =  0x480 kseg1_boot_mem_4B0 : ORIGIN =  0xBD0004B0  LENGTH =  0x1000  -  0x4B0  /* Boot Sections */   reset _RESET_ADDR :  {  KEEP ( * (  reset ) )  KEEP ( * (  reset  startup ) )  }   kseg1_boot_mem  cache_init :  {  * (  cache_init )  * (  cache_init  * )  }   kseg1_boot_mem_4B0     /* Interrupt vector table with vector offsets */   vectors _ebase_address + _ebase_vector_offsets +  0x200  :  {  /* Symbol __vector_offset_n points to vector_n if it exists * otherwise points to the default handler The * vector_offset_init o module then provides a data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code */    =  ALIGN ( 4 )  ; __vector_offset_0 =  ( DEFINED ( __vector_dispatch_0 )    (   - _ebase_address )  : __vector_offset_default ) ;  KEEP ( * (  vector_0 ) )          /* Default interrupt handler */    =  ALIGN ( 4 )  ; __vector_offset_default =    - _ebase_address ;  KEEP ( * (  vector_default ) )  }   kseg0_program_mem For Bootloaders placed in Program Flash Memory (PIC32MK Devices) The bootloader code resides from start of Program flash memory hence the application start address has to be after the end of bootloader Refer to specific device datasheet for program flash memory start address and length The Initial 4KB from Application start address are used by Reset Handler section XC32 Compiler calculates offset from the EBASE address and initializes the value of interrupt vector offset (OFFx) register The offset register is combined with EBASE register using a bitwise OR operator to obtain the interrupt vector address that the CPU will jump to when the corresponding interrupt occurs If the EBASE address is aligned to 4KB then all the interrupt vectors must be located within the 4KB from base address Example: When _ebase_address is set to 0x9D001000 and interrupts vectors are not located withing the 4KB boundary from the ebase address (OFFx 0x1000) then the bitwise OR operator may not provide correct interrupt vector address To provide maximum flexibility in placement of interrupt vectors: Always place the _ebase_address at start of Program flash memory (Example : 0x9D000000) like the default linker script Note: As _ebase_address is only used to calculate the vector offset it can be placed at start of program flash memory even though the bootloader code is residing there Change the offsets of exceptions and vector section to place them after the device startup code of application With this the interrupt handlers can be located anywhere in the Program Flash memory after bootloader space Updated linked scripts as explained above is shown here as an example  Bootloader length bootloader_length in the below snippet needs to be replaced with size of the respective bootloader PROVIDE ( _vector_spacing =  0x0001 ) ;  PROVIDE ( _ebase_address =  0x9D000000 ) ;  /* Place the vector table and other exceptions after the device reset and * cache init code */  PROVIDE ( _ebase_vector_offsets =   bootloader_length   +  0x1000 ) ; _RESET_ADDR =  0xBD000000  +   bootloader_length  ; _SIMPLE_TLB_REFILL_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets +  0 ; _GEN_EXCPT_ADDR = _ebase_address + _ebase_vector_offsets +  0x180 ; kseg0_program_mem ( rx )  : ORIGIN =  0x9D000000  +   bootloader_length   +  0x1000  LENGTH =  0x200000  -   bootloader_length   -  0x1000 kseg1_boot_mem : ORIGIN =  0xBD000000  +   bootloader_length   LENGTH =  0x1000  /* Boot Sections */   reset _RESET_ADDR :  {  KEEP ( * (  reset ) )  KEEP ( * (  reset  startup ) )  }   kseg1_boot_mem     /* Interrupt vector table with vector offsets */   vectors _ebase_address + _ebase_vector_offsets +  0x200  :  {  /* Symbol __vector_offset_n points to vector_n if it exists * otherwise points to the default handler The * vector_offset_init o module then provides a data section * containing values used to initialize the vector-offset SFRs * in the crt0 startup code */    =  ALIGN ( 4 )  ; __vector_offset_0 =  ( DEFINED ( __vector_dispatch_0 )    (   - _ebase_address )  : __vector_offset_default ) ;  KEEP ( * (  vector_0 ) )          /* Default interrupt handler */    =  ALIGN ( 4 )  ; __vector_offset_default =    - _ebase_address ;  KEEP ( * (  vector_default ) )  }   kseg0_program_mem For Bootloaders placed in Boot Flash Memory (PIC32MX Devices) The application start address by default will be start of program flash memory Refer to specific device datasheet for program flash memory start address and length The Initial 4KB are used by Reset Handler section In PIC32MX devices the _ebase_address holds the start address of vector table and it must be placed at 4KB boundary after the Reset Handler section Updated linked scripts as explained above is shown here as an example PROVIDE ( _vector_spacing =  0x0001 ) ;  PROVIDE ( _ebase_address =  0x9D001000 ) ; _RESET_ADDR =  0xBD000000 kseg0_program_mem ( rx )  : ORIGIN =  0x9D001000  LENGTH =  0x80000  -  0x1000 kseg1_boot_mem : ORIGIN =  0xBD000000  LENGTH =  0x1000  /* Boot Sections */   reset _RESET_ADDR :  {  KEEP ( * (  reset ) )  KEEP ( * (  reset  startup ) )  }   kseg1_boot_mem      vector_0 _ebase_address +  0x200  +  ( ( _vector_spacing   5 )  *  0 )  :  {  KEEP ( * (  vector_0 ) )  }   kseg0_program_mem ASSERT ( _vector_spacing ==  0  ||  SIZEOF (  vector_0 )  =  ( _vector_spacing   5 )   \"function at exception vector 0 too large\" )   vector_1 _ebase_address +  0x200  +  ( ( _vector_spacing   5 )  *  1 )  :  {  KEEP ( * (  vector_1 ) )  }   kseg0_program_mem ASSERT ( _vector_spacing ==  0  ||  SIZEOF (  vector_1 )  =  ( _vector_spacing   5 )   \"function at exception vector 1 too large\" )          For Bootloaders placed in Program Flash Memory (PIC32MX Devices) The bootloader code resides from start of Program flash memory hence the application start address has to be after the end of bootloader The Initial 4KB from Application start address are used by Reset Handler section Place the _ebase_address after the device startup code of application Updated linked scripts as explained above is shown here as an example Bootloader length bootloader_length in the below snippet needs to be replaced with size of the respective bootloader PROVIDE ( _vector_spacing =  0x0001 ) ;  PROVIDE ( _ebase_address =  0x9D000000  +   bootloader_length   +  0x1000 ) ; _RESET_ADDR =  0xBD000000  +   bootloader_length  ; kseg0_program_mem ( rx )  : ORIGIN =  0x9D000000  +   bootloader_length   +  0x1000  LENGTH =  0x80000  -   bootloader_length   -  0x1000 kseg1_boot_mem : ORIGIN =  0xBD000000  +   bootloader_length   LENGTH =  0x1000  /* Boot Sections */   reset _RESET_ADDR :  {  KEEP ( * (  reset ) )  KEEP ( * (  reset  startup ) )  }   kseg1_boot_mem      vector_0 _ebase_address +  0x200  +  ( ( _vector_spacing   5 )  *  0 )  :  {  KEEP ( * (  vector_0 ) )  }   kseg0_program_mem ASSERT ( _vector_spacing ==  0  ||  SIZEOF (  vector_0 )  =  ( _vector_spacing   5 )   \"function at exception vector 0 too large\" )   vector_1 _ebase_address +  0x200  +  ( ( _vector_spacing   5 )  *  1 )  :  {  KEEP ( * (  vector_1 ) )  }   kseg0_program_mem ASSERT ( _vector_spacing ==  0  ||  SIZEOF (  vector_1 )  =  ( _vector_spacing   5 )   \"function at exception vector 1 too large\" )          Note The bootloader and the application must have the same device configuration bit settings The Device configuration bit settings from the bootloader project will be updated by the programmer/debugger Hence the application linker script should not have any device configuration bit settings The application project will use the device configuration bit settings done by bootloader Device configurations and debug exception need to discarded from final hex file for the application project / DISCARD /  :  {  * (  _debug_exception )  }  / DISCARD /  :  {  * (  config_ * )  } Additional settings (Optional) Data Memory Origin and Data Memory Length values should be updated in linkerscript for reserving configured bytes from start of RAM to trigger bootloader from firmware /* Reserve trigger_len Bytes to Store Bootloader Trigger Pattern */ kseg0_data_mem ( w  x )  : ORIGIN =   ram_start   +   trigger_len   LENGTH =   ram_length   -   trigger_len  MPLAB X Settings Specifying post build option to automatically generate the binary file from hex file once the build is complete ``` ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME} ${IMAGE_TYPE} hex ${DISTDIR}/${PROJECTNAME} ${IMAGE_TYPE} bin ``` application_config_post_build_script ",
							" Configuring an application to be bootloaded for CORTEX-M based MCUs Application settings in MHC system configuration Launch MHC for the application project to be configured Select system component from the project graph and configure the below highlighted settings application_config_mhc_setting Disable Fuse Settings: Fuse settings needs to be disabled for the application which will be boot-loaded as the fuse settings are supposed to be programmed through programming tool from bootloader code Also the fuse settings are not programmable through firmware Enabling the fuse settings also increases the size of the binary when generated through the hex file When updating the bootloader itself make sure that the fuse settings for the bootloader application are also disabled Specify the Application Start Address: Specify the Start address from where the application will run under the Application Start Address (Hex) option in System block in MHC This value should be equal to or greater than the bootloader size and must be aligned to the erase unit size on that device As this value will be used by bootloader to Jump to application at device reset it should match the value provided to bootloader code The Application Start Address (Hex) will be used to generate XC32 compiler settings to place the code at intended address After the project is regenerated the ROM_ORIGIN and ROM_LENGTH are the XC32 linker variables which will be overridden with value provided for Application Start Address (Hex) and can be verified under Options for xc32-ld in Project Properties in MPLABX IDE as shown below application_config_xc32_ld_rom MPLAB X Settings Specifying post build option to automatically generate the binary file from hex file once the build is complete ${MP_CC_DIR}/xc32-objcopy -I ihex -O binary ${DISTDIR}/${PROJECTNAME} ${IMAGE_TYPE} hex ${DISTDIR}/${PROJECTNAME} ${IMAGE_TYPE} bin ``` application_config_post_build_script Additional settings (Optional) RAM_ORIGIN and RAM_LENGTH values should be provided for reserving configured bytes from start of RAM to trigger bootloader from firmware Under Project Properties expand options for xc32-ld and define the values for RAM_ORIGIN and RAM_LENGTH under Additional options This is optional and can be ignored if not required application_config_xc32_ld_ram "];

